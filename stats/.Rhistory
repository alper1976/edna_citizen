colnames(cc) <- c( "out", "species")
#cc$species <- gsub("\\_.*", "", rownames(species_cleaned))
test2 <- plyr::match_df(cc, original, on = c("species", "out"))
test2 <- unique(test2$species)
values <- c(1:79)
names <- rownames(base.df)
all_species <- as.data.frame(unique(historic.data$species))
colnames(all_species) <- "species"
hal_species <- as.data.frame(unique(hal$species))
colnames(hal_species) <- "species"
colnames(all_species) <- "species"
all_species <- rbind(all_species, hal_species)
all_species <- as.data.frame(unique(all_species))
recent_species <- as.data.frame(unique(historical.2000$species))
colnames(recent_species) <- "species"
colnames(recent_species) <- "species"
recent_species <- rbind(recent_species, hal_species)
recent_species <- as.data.frame(unique(recent_species))
lost_species <- rbind(recent_species,all_species)
lost_species <- as.data.frame(table(lost_species))
lost_species <- subset(lost_species,Freq==1)
lost_species <- as.data.frame(lost_species[,-2])
colnames(lost_species) <- "species"
my_species <- as.data.frame(unique(original$species))
colnames(my_species) <- "species"
new_species <- rbind(my_species,lost_species)
new_species <- as.data.frame(table(new_species))
refound <- subset(new_species,Freq==2)
refound <- as.data.frame(refound[,-2])
colnames(refound) <- "species"
lost <- rbind(lost_species, refound)
lost <- as.data.frame(table(lost))
lost <- subset(lost,Freq==1)
#if i need to make observation data in columns
#library(tidyr)
#historical.2000_new <- historical.2000 %>% pivot_wider(names_from = validScientificName, values_from = longitude)
recent_species$type <- "Recent species"
colnames(recent_species) <- c("species", "type")
hist_species <- as.data.frame(unique(cc$species))
hist_species$type <- "Historic species"
colnames(hist_species) <- c("species", "type")
out_of_reach <- rbind(recent_species, hist_species)
out_of_reach <- as.data.frame(table(out_of_reach))
out_of_reach <- subset(out_of_reach,Freq==0)
out_of_reach$type <- "Out of reach"
colnames(out_of_reach) <- c("species", "type")
lost <- subset(lost, select = species)
lost$type <- "lost"
blebb <- plyr::match_df(recent_species, cc, on = "species")
blebb <- unique(blebb$species)
bebe <- unique(cc$species)
babe <- unique(recent_species$species)
# Grouping your dataframe based on species and then taking the number of observations in each group
df_historic_summary <-  cc %>%
group_by(species) %>%
dplyr::summarize(n= length(species))
df_historic_summary$type <- "Traditional method"
# Doing the same with your data frame. There's something fishy going on in the df_lone: Namely it seems that all species are present in all sites, and this can't be true, so I recommend you to check this dataframe?
df_lone_summary <-  original %>%
group_by(species) %>%
dplyr::summarize(n= length(species))
df_lone_summary$type <- "eDNA method"
#Combining the dataframes
df_both_summary <- rbind(df_historic_summary,df_lone_summary)
ecology_fish = read.xlsx(file.path(data_dir, "Ecology_fish_edna_finished.xlsx"), 1,
header=T, check.names=FALSE)
df_both_summary1 = merge(df_both_summary, ecology_fish, by.x = "species", by.y ="Latin name", all.x = TRUE)
cairo_ps(file.path(figs_dir, "Fig2_fish_species.eps"), width=80/25.4,
height=160/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
# Here's the very basic plot but you can make it prettier i.e. select only species of interest, change color scheme, perhaps add the percentage number value on the corresponding box etc.
ggplot(df_both_summary1, aes(type, species, fill= n)) +
geom_tile(alpha = 0.7) +
labs(fill = "") +
scale_fill_gradient(low = "#56B1F7", high = "#132B43") +
theme_classic() +
theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 8, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11), # set size of x axis label
axis.title.y = element_text(size = 11),
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 11))
# I thin. k it would be neat if you can turn the values into relative abundance. So basically instead of showing that cod was present in 5 sampling sites, you show that e.g. cod was present in 8% of the sampling sites.
dev.off()
habitat_colors = setNames(color_palette_fish, levels(df_both_summary1$Habitat))
cairo_ps(file.path(figs_dir, "Fig2_fish_habitat.eps"), width=100/25.4,
height=160/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggplot(df_both_summary1) +
geom_bar(mapping = aes(x = 0.5, y = species, fill = Habitat),
stat = "identity",
alpha = 0.7) +
scale_fill_manual(values = habitat_colors) +
theme_classic() +
theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 8, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11), # set size of x axis label
axis.title.y = element_text(size = 11),
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 11))
dev.off()
ecology_colors = setNames(color_palette_fish, levels(df_both_summary1$Ecotype))
cairo_ps(file.path(figs_dir, "Fig2_fish_ecology.eps"), width=100/25.4,
height=160/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggplot(df_both_summary1) +
geom_bar(mapping = aes(x = 0.5, y = species, fill = Ecotype),
stat = "identity",
alpha = 0.7) +
scale_fill_manual(values = ecology_colors) +
theme_classic() +
theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 8, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11), # set size of x axis label
axis.title.y = element_text(size = 11),
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 11))
dev.off()
biogeo_colors = setNames(color_palette_fish, levels(df_both_summary1$Biogeography))
cairo_ps(file.path(figs_dir, "Fig2_fish_biogeo.eps"), width=100/25.4,
height=160/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggplot(df_both_summary1) +
geom_bar(mapping = aes(x = 0.5, y = species, fill = Biogeography),
stat = "identity",
alpha = 0.7) +
scale_fill_manual(values = biogeo_colors) +
theme_classic() +
theme(axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 8, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11), # set size of x axis label
axis.title.y = element_text(size = 11),
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 11))
dev.off()
lone_summary <- subset(df_lone_summary, select = c(species, type))
historic_summary <- subset(df_historic_summary, select = c(species, type))
match_my <- plyr::match_df(historic_summary, lone_summary, on= "species")
match_his <- plyr::match_df(out_of_reach, lone_summary, on= "species")
cc_species <- as.data.frame(unique(cc$species))
colnames(cc_species) <- "species"
hal_species2 <- as.data.frame(unique(hal$species))
colnames(hal_species2) <- "species"
mach <- plyr::match_df(cc_species,hal_species2 , on ="species")
no_species <- rbind(match_my,historic_summary)
no_species <- as.data.frame(table(no_species))
no_species <- subset(no_species,Freq==1)
no_species <- as.data.frame(no_species[,-2])
colnames(no_species) <- "species"
makka <- plyr::match_df(no_species, historic_summary)
df_historic <- cc
df_lone <- original
df_lone$type <- "eDNA method"
df_historic$type <- "Traditional method"
df_historic <- unique(df_historic)
#hist(as.numeric(df_historic$out), breaks = 80)
df_both_map <- rbind(df_lone,df_historic)
#	Let's use Gadus_morhua as an example species. You can repeat this same code for all the species that you are interested in by just assigning a different species below:
genus_species <- "Gadus_morhua"
# Here you subset the data for only the species of interest
df_genus_species <- subset(df_both_map,species==genus_species)
#Here you create a dataframe that counts the number of observations at each sampling point
df_genus_species2 <- df_genus_species %>%
group_by(out) %>%
dplyr::summarize(n= length(out))
# Here you merge the "species of intersest" data frame and the number of observations at each sampling point
df_genus_species <- merge(df_genus_species,df_genus_species2,by="out")
# Here you create a new categorical variable indicating whether the species of interest was present in both the historical record and your sampling, or only historical record or your sampling.
df_genus_species$presence <- ifelse(df_genus_species$n>1,"Present in both",df_genus_species$type)
# Here you create an index dataframe for all those sampling sites where this species was present
sites_species <- as.data.frame(unique(df_genus_species$out))
colnames(sites_species)[1] ="out"
#Here you create an index dataframe for all those sampling sites where this species was absent
all_sites <- as.data.frame(1:79)
colnames(all_sites)[1] ="out"
sites_empty <- rbind(sites_species,all_sites)
#sites_empty <- sites_empty %>%
#group_by(out) %>%
#mutate(out2 = ifelse(length(out)>1,1,0))
sites_empty <- as.data.frame(table(sites_empty))
sites_empty <- subset(sites_empty,Freq==1)
sites_empty$species <- genus_species
sites_empty$type <- NA
sites_empty$n <- 0
sites_empty$presence <-"Absent" # Here you finally assign "absent" value to those sites where this species was absent in both the historical record and your data.
sites_empty <- sites_empty[,-2]
#Here you make the final dataframe that you can use in your maps.
df_genus_species <- rbind(df_genus_species,sites_empty)
df_genus_species <- df_genus_species[,c(1,2,5)]
df_genus_species <- df_genus_species[!duplicated(df_genus_species), ]
#rownames(df_genus_species) <- df_genus_species$out)
coordinates <- subset(data_cleaned, select = c(Lat,Lon))
coordinates$out <- 1:79
df_genus_species <- merge(df_genus_species, coordinates, by = "out")
set_shapes <- setNames(c(18, 15, 17, 16), levels(unique(df_genus_species$presence)))
# Now you can just add the coordinates for each sampling site and make your map figure. In order to get the different symbols to represent the different presence status, just add "presence" column as a grouping variable.
# png("cod-map.png", height = 500, width = 400)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df_genus_species, aes(x=Lon, y=Lat, color = presence, shape=presence)) +
#   scale_shape_manual(values = set_shapes) +
#   labs(x = "Longitude", y = "Latitude")+
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),
#         legend.text = element_text(size = 14), # set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
genus_species <- "Ctenolabrus_rupestris"
# Here you subset the data for only the species of interest
df_genus_species <- subset(df_both_map,species==genus_species)
#Here you create a dataframe that counts the number of observations at each sampling point
df_genus_species2 <- df_genus_species %>%
group_by(out) %>%
dplyr::summarize(n= length(out))
# Here you merge the "species of intersest" data frame and the number of observations at each sampling point
df_genus_species <- merge(df_genus_species,df_genus_species2,by="out")
# Here you create a new categorical variable indicating whether the species of interest was present in both the historical record and your sampling, or only historical record or your sampling.
df_genus_species$presence <- ifelse(df_genus_species$n>1,"Present in both",df_genus_species$type)
# Here you create an index dataframe for all those sampling sites where this species was present
sites_species <- as.data.frame(unique(df_genus_species$out))
colnames(sites_species)[1] ="out"
#Here you create an index dataframe for all those sampling sites where this species was absent
all_sites <- as.data.frame(1:79)
colnames(all_sites)[1] ="out"
sites_empty <- rbind(sites_species,all_sites)
#sites_empty <- sites_empty %>%
#group_by(out) %>%
#mutate(out2 = ifelse(length(out)>1,1,0))
sites_empty <- as.data.frame(table(sites_empty))
sites_empty <- subset(sites_empty,Freq==1)
sites_empty$species <- genus_species
sites_empty$type <- NA
sites_empty$n <- 0
sites_empty$presence <-"Absent" # Here you finally assign "absent" value to those sites where this species was absent in both the historical record and your data.
sites_empty <- sites_empty[,-2]
#Here you make the final dataframe that you can use in your maps.
df_genus_species <- rbind(df_genus_species,sites_empty)
df_genus_species <- df_genus_species[,c(1,2,5)]
df_genus_species <- df_genus_species[!duplicated(df_genus_species), ]
#rownames(df_genus_species) <- as.numeric(df_genus_species$out)
coordinates <- subset(data_cleaned, select = c(Lat,Lon))
coordinates$out <- 1:79
df_genus_species <- merge(df_genus_species, coordinates, by = "out")
# Now you can just add the coordinates for each sampling site and make your map figure. In order to get the different symbols to represent the different presence status, just add "presence" column as a grouping variable.
# png("bergnebb-map.png", height = 500, width = 400)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df_genus_species, aes(x=Lon, y=Lat, color = presence, shape=presence)) +
#   labs(x = "Longitude", y = "Latitude")+
#   scale_shape_manual(values = set_shapes) +
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),
#         legend.text = element_text(size = 14), # set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
df2 <- subset(df_both_map, species %in% c("Oncorhynchus_gorbuscha", "Cyprinus_carpio", "Tinca_tinca", "Carassius_auratus"))
df2$species <- factor(df2$species)
df3 <- merge(df2, coordinates)
# png("invasive-map.png", height = 400, width = 400)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df3, aes(x=Lon, y=Lat, color = species, shape=type)) +
#   labs(x = "Longitude", y = "Latitude")+
#   scale_shape_manual(values = c(15, 16)) +
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),
#         legend.text = element_text(size = 14), # set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
df2 <- subset(df_both_map, species %in% c("Engraulis_encrasicolus", "Scomber_scombrus", "Entelurus_aequoreus", "Trisopterus_minutus", "Sardina_pilchardus"))
df2$species <- factor(df2$species)
df3 <- merge(df2, coordinates)
# png("warm-water-map.png", height = 400, width = 400)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df3, aes(x=Lon, y=Lat, color = species, shape=type)) +
#   labs(x = "Longitude", y = "Latitude")+
#   scale_shape_manual(values = c(15, 16)) +
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),
#         legend.text = element_text(size = 14), # set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
# Basic piechart, må fikse
df <- as.data.frame(table(historical.2000$institution))
colnames(df) <- c("Institution", "frequency")
#eller simpelthen bare
png("org_barplot.png", height = 300, width = 450)
ggplot(df, aes(x="", y=frequency, fill=Institution)) +
theme_classic() +
geom_bar(stat="identity")
dev.off()
df2 <- subset(df_both_map, species %in% c("Buglossidium_luteum", "Ciliata_septentrionalis"))
df2$species <- factor(df2$species)
df3 <- merge(df2, coordinates)
# png("novel-map.png", height = 400, width = 400)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df3, aes(x=Lon, y=Lat, color = species, shape=species)) +
#   labs(x = "Longitude", y = "Latitude")+
#   scale_shape_manual(values = c(15, 16)) +
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),legend.text = element_text(size = 14),
## set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
df2rare <- subset(df_both_map, species %in% c("Trisopterus_luscus", "Phrynorhombus_norvegicus", "Ammodytes_marinus", "Raniceps_raninus", "Centrolabrus_exoletus", "Enchelyopus_cimbrius"))
df2rare$species <- factor(df2rare$species)
df3 <- merge(df2rare, coordinates)
# png("rare-map.png", height = 500, width = 450)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df3, aes(x=Lon, y=Lat, color = species, shape=type)) +
#   labs(x = "Longitude", y = "Latitude")+
#   scale_shape_manual(values = c(15, 16)) +
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),
#         legend.text = element_text(size = 14), # set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
df2 <- subset(df_both_map, species %in% refound$species)
df2$species <- factor(df2$species)
df3 <- merge(df2, coordinates)
# png("refound-map.png", height = 400, width = 400)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df3, aes(x=Lon, y=Lat, color = species)) +
#   labs(x = "Longitude", y = "Latitude")+
#   scale_shape_manual(values = c(15, 16)) +
#   theme(axis.text = element_text(size = 14),
#         axis.title.x = element_text(size = 16), # set size of x axis label
#         axis.title.y = element_text(size = 16),
#         legend.text = element_text(size = 14), # set size of legend text
#         legend.title = element_text(size = 16))
# dev.off()
df2 <- subset(df_both_map, species %in% c("Gymnocephalus_cernua", "Entelurus_aequoreus", "Abramis_brama", "Phrynorhombus_norvegicus"))
df2$species <- factor(df2$species)
df3 <- merge(df2, coordinates)
# ggmap(get_stamenmap(c(10, 58.8, 11, 60),  maptype = "toner-lite", zoom = 10)) +
#   geom_point(data=df3, aes(x=Lon, y=Lat, color = species, shape=type)) +
#   labs(x = "Longitude", y = "Latitude")
#Ditta går ikkje når
c_species <- gsub(" ", "_", cc$species)
c_species <- unique(c_species)
o_species <- as.character(unique(original$species))
species_name <- c(c_species, o_species)
species_name <- unique(species_name)
his2017 <- subset(historical.2000, select = c("species", "Lon", "Lat"))
mx3 = cc
mx4 = original
sn <- unique(cc$species)
ft.p <- c()
ct.p <- c()
for (specie in sn){
subset_cc = mx3[mx3$species == specie,]
subset_og = mx4[mx4$species == specie,]
merged_species = merge(subset_cc, subset_og, by = "out", all = TRUE)
merged_species$species.y = as.character(merged_species$species.y)
merged_species[is.na(merged_species)] <- 0
if(length(unique(merged_species$species.x))>1 &&
length(unique(merged_species$species.y))>1){
ct <- chisq.test(merged_species$species.x, merged_species$species.y, simulate.p.value = T)
ft <- fisher.test(merged_species$species.x, merged_species$species.y, simulate.p.value = T)
ft.p <- append(ft.p, ft$p.value)
ct.p <- append(ct.p, ct$p.value)
}
else{
ft.p <- append(ft.p, NA)
ct.p <- append(ct.p, NA)
}
}
names(ft.p) = sn
names(ct.p) = sn
ft.p.adjust <- p.adjust(ft.p, method = "hochberg", n = length(ft.p))
ct.p.adjust <- p.adjust(ct.p, method = "hochberg", n = length(ct.p))
ft.p.adjust <- as.data.frame(ft.p.adjust)
ct.p.adjust <- as.data.frame(ct.p.adjust)
both.test <- as.data.frame(cbind(ft.p.adjust, ct.p.adjust))
both.test$species  <- rownames(both.test)
colnames(both.test) <- c("Fisher test","Chi-squared test", "species")
both.test <- na.omit(both.test)
both.test <- melt(both.test)
# Create a binary variable indicating whether each value is below 0.1
both.test$below_005 <- ifelse(both.test$value < 0.05, "below 0.05", ifelse(both.test$value < 0.1, "below 0.1", "above 0.1"))
# Plot the heatmap with a manual fill scale
my_breaks = c(0.01, 0.05, 0.001, 0.0001)
ggplot(both.test, aes(variable, species, fill = below_005)) +
geom_tile() +
scale_fill_manual(values = c("#114477", "#4477AA", "#77AADD"),
labels = c("above 0.1", "below 0.1", "below 0.05"))
cairo_ps(file.path(figs_dir, "Fig3_stats_test.eps"), width=90/25.4,
height=160/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggplot(both.test, aes(variable, species, fill = below_005)) +
geom_tile(alpha = 0.5) +
scale_fill_manual(values = c("#114477", "#4477AA", "#77AADD"),
labels = c("> 0.1", "< 0.1", "< 0.05")) +
theme_classic() +
theme(axis.text.y = element_text(size = 8),
axis.text.x = element_text(size = 8, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11), # set size of x axis label
axis.title.y = element_text(size = 11),
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 11))
dev.off()
## VENN DIAGRAM to match methods overlap
MT =
cairo_ps(file.path(figs_dir, "Fig3b_venn.eps"), width=40/25.4,
height=40/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggvenn(MT) +
theme(
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 9),
plot.subtitle = element_text(size = 9),
text = element_text(size = 9)) # set the font size to 18
# Create a new variable that indicates whether the species is below or above a certain latitude
lat_group <- ifelse(data_cleaned$Lat > 59.667800, "above", "below")
df4 <- data.frame(lat_group, species_cleaned)
melted_df= melt(df4)
melt_df <- filter(melted_df, value !=0)
melt_df <- subset(melt_df, select = -c(value))
above = c()
below = c()
for (i in 1:length(melt_df$lat_group)){
if (melt_df$lat_group[i] =="above"){
above <- melt_df$variable[i]
}
else{below <- melt_df$variable[i]}
}
# use list as input
A <-list("Outer Oslo fjord" = melt_df[melt_df$lat_group == "below", "variable"],
"Inner Oslo fjord" = melt_df[melt_df$lat_group == "above", "variable"])
above <- as.data.frame(A$`Inner Oslo fjord`)
above <- unique(above)
colnames(above) <- "species"
below <- as.data.frame(A$`Outer Oslo fjord`)
below <- unique(below)
colnames(below) <- "species"
bee <- rbind(above, below)
bee <- as.data.frame(table(bee))
bee <- subset(bee,Freq==1)
bee <- as.data.frame(bee)
colnames(bee) <- c("species", "v1")
abee <- plyr::match_df(above, bee, on = "species")
bbee <- plyr::match_df(below, bee, on = "species")
spge <- rbind(abee, bbee)
# create venn diagram and display all the sets
cairo_ps(file.path(figs_dir, "Fig5a_venn.eps"), width=80/25.4,
height=80/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggvenn(A) +
theme(
legend.text = element_text(size = 11), # set size of legend text
legend.title = element_text(size = 11),
plot.subtitle = element_text(size = 11),
text = element_text(size = 11)) # set the font size to 18
dev.off()
# Create a new variable that indicates whether the species is below or above a certain latitude
lat_group <- ifelse(data_cleaned$Lat > 59.667800, "above", "below")
df4 <- data.frame(lat_group, species_cleaned)
melted_df= melt(df4)
melt_df <- filter(melted_df, value !=0)
melt_df <- subset(melt_df, select = -c(value))
above = c()
below = c()
for (i in 1:length(melt_df$lat_group)){
if (melt_df$lat_group[i] =="above"){
above <- melt_df$variable[i]
}
else{below <- melt_df$variable[i]}
}
# use list as input
A <-list("Outer Oslo fjord" = melt_df[melt_df$lat_group == "below", "variable"],
"Inner Oslo fjord" = melt_df[melt_df$lat_group == "above", "variable"])
above <- as.data.frame(A$`Inner Oslo fjord`)
above <- unique(above)
colnames(above) <- "species"
below <- as.data.frame(A$`Outer Oslo fjord`)
below <- unique(below)
colnames(below) <- "species"
bee <- rbind(above, below)
bee <- as.data.frame(table(bee))
bee <- subset(bee,Freq==1)
bee <- as.data.frame(bee)
colnames(bee) <- c("species", "v1")
abee <- plyr::match_df(above, bee, on = "species")
bbee <- plyr::match_df(below, bee, on = "species")
spge <- rbind(abee, bbee)
# create venn diagram and display all the sets
cairo_ps(file.path(figs_dir, "Fig5a_venn.eps"), width=80/25.4,
height=80/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggvenn(A) +
theme(
legend.text = element_text(size = 11), # set size of legend text
legend.title = element_text(size = 11),
plot.subtitle = element_text(size = 11),
text = element_text(size = 11)) # set the font size to 18
dev.off()
count_species <- function(row) {
sum(row > 0)
}
species_cleaned$NumSpecies <- apply(species_cleaned[, -1], 1, count_species)
species_cleaned$Lat = data_cleaned$Lat
species_cleaned$lat_group = lat_group
cairo_ps(file.path(figs_dir, "Fig5b_regression.eps"), width=80/25.4,
height=80/25.4, pointsize = 4, bg = FALSE, fallback_resolution = 300)
ggplot(species_cleaned, aes(x = Lat, y = NumSpecies)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Regression line with confidence intervals
labs(x = "Latitude",
y = "observed species") +
theme_classic() +
theme(axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
axis.title.x = element_text(size = 11), # set size of x axis label
axis.title.y = element_text(size = 11),
legend.text = element_text(size = 9), # set size of legend text
legend.title = element_text(size = 11))
dev.off()
